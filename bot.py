import asyncio
import os
import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

# -------------------------------------------------------------------
# =================== –í–ê–®–ò –ù–ê–°–¢–†–û–ô–ö–ò ================================
# -------------------------------------------------------------------

# 1) –¢–æ–∫–µ–Ω –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
#    –õ—É—á—à–µ –≤—Å–µ–≥–æ —É–∫–∞–∑–∞—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.
#    –ò–ª–∏ –≤–ø–∏—à–∏—Ç–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å (–º–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ).
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN)")

# 2) –ë–∞–∑–æ–≤—ã–π URL –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ (REST API).
#    –ù–∞–ø—Ä–∏–º–µ—Ä: "https://example.com/api/v1"
BASE_API_URL = "https://example.com/api/v1"

# 3) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ö–ª—é—á/—Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ API.
#    –ï—Å–ª–∏ API –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω, —É–∫–∞–∂–∏—Ç–µ API_KEY = None.
API_KEY = "https://ion-master.ru/"  # –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ

# 4) –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è).
HEADERS = {}
if API_KEY:
    HEADERS = {
        "Authorization": f"Bearer {API_KEY}"
    }


# -------------------------------------------------------------------
# ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–©–ï–ù–ò–Ø –ö –í–ê–®–ï–ú–£ API ======================
# -------------------------------------------------------------------

async def get_categories() -> list:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞.
    –û–∂–∏–¥–∞–µ–º—ã–π JSON (–ø—Ä–∏–º–µ—Ä):
    [
      {"id": 1, "name": "iPhone"},
      {"id": 2, "name": "iPad"}
      ...
    ]
    """
    url = f"{BASE_API_URL}/categories"
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=HEADERS) as resp:
            if resp.status == 200:
                return await resp.json()
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: —Å—Ç–∞—Ç—É—Å {resp.status}")
                return []

async def get_products_by_category(cat_id: int) -> list:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ cat_id.
    –ü—Ä–∏–º–µ—Ä API: GET /categories/<cat_id>/products
    –û–∂–∏–¥–∞–µ–º—ã–π JSON (–ø—Ä–∏–º–µ—Ä):
    [
      {"id": 101, "name": "iPhone 16 Pro Max Display", "price": 25000},
      ...
    ]
    """
    url = f"{BASE_API_URL}/categories/{cat_id}/products"
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=HEADERS) as resp:
            if resp.status == 200:
                return await resp.json()
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è cat_id={cat_id}: —Å—Ç–∞—Ç—É—Å {resp.status}")
                return []

async def get_product_details(product_id: int) -> dict:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ —Ç–æ–≤–∞—Ä–µ —Å ID = product_id.
    –ü—Ä–∏–º–µ—Ä API: GET /products/<product_id>
    –û–∂–∏–¥–∞–µ–º—ã–π JSON (–ø—Ä–∏–º–µ—Ä):
    {
      "id": 101,
      "name": "iPhone 16 Pro Max Display",
      "price": 25000,
      "description": "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π Apple..."
    }
    """
    url = f"{BASE_API_URL}/products/{product_id}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=HEADERS) as resp:
            if resp.status == 200:
                return await resp.json()
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–≤–∞—Ä–∞ {product_id}: —Å—Ç–∞—Ç—É—Å {resp.status}")
                return {}

async def create_order(user_id: int, product_id: int, quantity: int = 1) -> dict:
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ POST /orders.
    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–∏–º–µ—Ä):
    {
      "user_id": <telegram_user_id>,
      "product_id": <product_id>,
      "quantity": <quantity>
    }
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π JSON (–ø—Ä–∏–º–µ—Ä):
    {
      "success": true,
      "order_id": 999
    }
    """
    url = f"{BASE_API_URL}/orders"
    payload = {
        "user_id": user_id,
        "product_id": product_id,
        "quantity": quantity
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=HEADERS) as resp:
            if resp.status == 200:
                return await resp.json()
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: —Å—Ç–∞—Ç—É—Å {resp.status}")
                return {"success": False}


# -------------------------------------------------------------------
# ========== –ù–ê–°–¢–†–û–ô–ö–ê AIOGRAM (–•–≠–ù–î–õ–ï–†–´) ============================
# -------------------------------------------------------------------

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –ü—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    categories = await get_categories()
    if not categories:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ—à–∏–±–∫–∞ API).")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = InlineKeyboardMarkup()
    for cat in categories:
        cat_id = cat["id"]
        cat_name = cat["name"]
        kb.add(InlineKeyboardButton(text=cat_name, callback_data=f"cat_{cat_id}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.callback_query()
async def callback_handler(call: CallbackQuery):
    data = call.data

    # 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: cat_<cat_id>
    if data.startswith("cat_"):
        cat_id_str = data.split("_")[1]
        cat_id = int(cat_id_str)
        products = await get_products_by_category(cat_id)
        if not products:
            await call.message.edit_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return

        # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        kb = InlineKeyboardMarkup()
        for p in products:
            prod_id = p["id"]
            prod_name = p["name"]
            kb.add(InlineKeyboardButton(text=prod_name, callback_data=f"prod_{prod_id}"))
        
        # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
        kb.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)

    # 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä: prod_<prod_id>
    elif data.startswith("prod_"):
        prod_id_str = data.split("_")[1]
        prod_id = int(prod_id_str)
        product = await get_product_details(prod_id)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ API", show_alert=True)
            return

        name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        price = product.get("price", 0)
        description = product.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        text = (
            f"<b>{name}</b>\n"
            f"–¶–µ–Ω–∞: {price}‚ÇΩ\n\n"
            f"{description}"
        )

        kb = InlineKeyboardMarkup()
        # –ö–Ω–æ–ø–∫–∞ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª
        kb.add(InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_{prod_id}"))
        # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª (–æ–ø—è—Ç—å –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
        kb.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
        
        await call.message.edit_text(text, reply_markup=kb)

    # 3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª: order_<prod_id>
    elif data.startswith("order_"):
        prod_id_str = data.split("_")[1]
        prod_id = int(prod_id_str)

        user_id = call.from_user.id  # ID —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –î–æ–ø—É—Å—Ç–∏–º, –≤—Å–µ–≥–¥–∞ quantity = 1:
        result = await create_order(user_id=user_id, product_id=prod_id, quantity=1)

        if result.get("success"):
            order_id = result.get("order_id", 0)
            await call.answer(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}", show_alert=True)
        else:
            await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ (–æ—à–∏–±–∫–∞ API).", show_alert=True)

    # 4. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º¬ª: back_to_categories
    elif data == "back_to_categories":
        categories = await get_categories()
        if not categories:
            await call.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ—à–∏–±–∫–∞).")
            return

        kb = InlineKeyboardMarkup()
        for cat in categories:
            cat_id = cat["id"]
            cat_name = cat["name"]
            kb.add(InlineKeyboardButton(text=cat_name, callback_data=f"cat_{cat_id}"))

        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)


# -------------------------------------------------------------------
# =========================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ============================
# -------------------------------------------------------------------

async def main():
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook, –µ—Å–ª–∏ –±—ã–ª, –∏ –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∞–ø–¥–µ–π—Ç–æ–≤
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

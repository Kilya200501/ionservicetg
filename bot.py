import asyncio
import requests
import xmltodict
from aiogram import Bot, Dispatcher
from aiogram.types import (Message, CallbackQuery,
                           InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.filters import Command

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
TOKEN = "8102076873:AAHf_fPaG5n2tr5C1NnoOVJ62MnIo-YbRi8"

# –ê–¥—Ä–µ—Å Yandex YML-—Ñ–∏–¥–∞
FEED_URL = "https://ion-master.ru/index.php?route=extension/feed/yandex_yml"

# ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ø—Ä–æ–¥–∞–≤—Ü–∞), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã
MANAGER_ID = 5300643604
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (aiogram 3.x)
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()


def get_products_from_feed():
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç Yandex YML-—Ñ–∏–¥, –ø–∞—Ä—Å–∏—Ç XML –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{'id': ..., 'name':..., 'price':..., 'description':...}, ...].

    –ò—Å—Ö–æ–¥–∏–º –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (—É–ø—Ä–æ—â—ë–Ω–Ω–æ):
      <yml_catalog>
        <shop>
          <offers>
            <offer id="33" available="true">
              <name>...</name>
              <price>...</price>
              <description>...</description>
              ...
            </offer>
            ...
          </offers>
        </shop>
      </yml_catalog>
    """
    try:
        response = requests.get(FEED_URL, timeout=10)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞: {response.status_code}")
            return []

        # –ü–∞—Ä—Å–∏–º XML –≤ —Å–ª–æ–≤–∞—Ä—å
        data = xmltodict.parse(response.content)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ offer
        offers = data["yml_catalog"]["shop"]["offers"]["offer"]
        # –ï—Å–ª–∏ –≤—Å–µ–≥–æ –æ–¥–∏–Ω <offer>, xmltodict –≤–µ—Ä–Ω—ë—Ç dict –≤–º–µ—Å—Ç–æ list ‚Äî –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –≤ list
        if isinstance(offers, dict):
            offers = [offers]

        products = []
        for offer in offers:
            prod_id = offer.get("@id")      # <offer id="33" ...>
            name = offer.get("name")        # <name>–¢–æ–≤–∞—Ä</name>
            price = offer.get("price")      # <price>12345</price>
            desc = offer.get("description") # <description>–û–ø–∏—Å–∞–Ω–∏–µ...</description>

            products.append({
                "id": prod_id,
                "name": name,
                "price": price,
                "description": desc
            })

        return products

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∏–¥–∞:", e)
        return []


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ + —Ü–µ–Ω–∞) –∏–∑ YML-—Ñ–∏–¥–∞.
    """
    products = get_products_from_feed()
    if not products:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã (—Ñ–∏–¥ –ø—É—Å—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞).")
        return

    kb = InlineKeyboardMarkup()
    for p in products:
        pid = p["id"]
        pname = p["name"]
        pprice = p["price"]
        # –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏: "–î–∏—Å–ø–ª–µ–π iPhone 16 Pro Max - 25000‚ÇΩ"
        button_text = f"{pname} - {pprice}‚ÇΩ"
        kb.add(InlineKeyboardButton(text=button_text, callback_data=f"prod_{pid}"))

    await message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–∏–∑ Yandex YML —Ñ–∏–¥–∞):", reply_markup=kb)


@dp.callback_query()
async def callback_handler(call: CallbackQuery):
    """
    1) –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞: prod_<ID>
    2) –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: order_<ID>
    """
    data = call.data

    # 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä
    if data.startswith("prod_"):
        product_id = data.split("_")[1]
        products = get_products_from_feed()
        product = next((p for p in products if p["id"] == product_id), None)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∏–¥–µ", show_alert=True)
            return

        # –û–ø–∏—Å–∞–Ω–∏–µ
        name = product["name"]
        price = product["price"]
        desc = product["description"] or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

        text = (
            f"<b>{name}</b>\n"
            f"–¶–µ–Ω–∞: {price}‚ÇΩ\n\n"
            f"{desc}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                                   callback_data=f"order_{product_id}"))
        # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª –∏–ª–∏ –¥—Ä—É–≥–∏–µ

        await call.message.edit_text(text, reply_markup=kb)

    # 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑
    elif data.startswith("order_"):
        product_id = data.split("_")[1]
        products = get_products_from_feed()
        product = next((p for p in products if p["id"] == product_id), None)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        user_name = call.from_user.first_name
        user_id = call.from_user.id

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        name = product["name"]
        price = product["price"]
        text_for_manager = (
            f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
            f"üîπ <b>–¢–æ–≤–∞—Ä:</b> {name}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price}‚ÇΩ\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_name}\n"
            f"üÜî <b>ID:</b> {user_id}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
        try:
            await bot.send_message(MANAGER_ID, text_for_manager)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", show_alert=True)

    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

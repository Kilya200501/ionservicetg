import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("8083923455:AAFwD2nAD5oPSeA16TrYjAgk_X2tw49F5n4")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω
if not TOKEN: 
    raise ValueError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤)
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì± iPhone", callback_data="category_iphone")],
    [InlineKeyboardButton(text="‚åö Apple Watch", callback_data="category_watch")],
    [InlineKeyboardButton(text="üíª MacBook", callback_data="category_macbook")],
    [InlineKeyboardButton(text="üìü iPad", callback_data="category_ipad")],
])

# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ iPhone
iphone_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="iPhone 16 Pro Max", callback_data="iphone_16_pro_max")],
    [InlineKeyboardButton(text="iPhone 16 Pro", callback_data="iphone_16_pro")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
])

# –ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è iPhone 16 Pro Max
iphone_16_pro_max_parts = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîß –î–∏—Å–ø–ª–µ–π", callback_data="part_display")],
    [InlineKeyboardButton(text="üîã –ë–∞—Ç–∞—Ä–µ—è", callback_data="part_battery")],
    [InlineKeyboardButton(text="üì∏ –ö–∞–º–µ—Ä–∞", callback_data="part_camera")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_iphone")],
])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ Ion Service!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda call: call.data.startswith("category_"))
async def category_callback(call: types.CallbackQuery):
    if call.data == "category_iphone":
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:", reply_markup=iphone_menu)
    elif call.data == "category_watch":
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Apple Watch (–º–µ–Ω—é –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
    elif call.data == "category_macbook":
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å MacBook (–º–µ–Ω—é –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
    elif call.data == "category_ipad":
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPad (–º–µ–Ω—é –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ iPhone 16 Pro Max
@dp.callback_query(lambda call: call.data == "iphone_16_pro_max")
async def iphone_16_pro_max_callback(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—á–∞—Å—Ç—å –¥–ª—è *iPhone 16 Pro Max*:", reply_markup=iphone_16_pro_max_parts)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda call: call.data == "back_main")
async def back_main_callback(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é iPhone
@dp.callback_query(lambda call: call.data == "back_iphone")
async def back_iphone_callback(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:", reply_markup=iphone_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π (–ø—Ä–∏–º–µ—Ä)
@dp.callback_query(lambda call: call.data.startswith("part_"))
async def part_callback(call: types.CallbackQuery):
    parts = {
        "part_display": "üîß –î–∏—Å–ø–ª–µ–π –¥–ª—è iPhone 16 Pro Max\nüí∞ –¶–µ–Ω–∞: 500$",
        "part_battery": "üîã –ë–∞—Ç–∞—Ä–µ—è –¥–ª—è iPhone 16 Pro Max\nüí∞ –¶–µ–Ω–∞: 150$",
        "part_camera": "üì∏ –ö–∞–º–µ—Ä–∞ –¥–ª—è iPhone 16 Pro Max\nüí∞ –¶–µ–Ω–∞: 200$",
    }
    text = parts.get(call.data, "–ó–∞–ø—á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    back_button = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_iphone")]])
    
    await call.message.edit_text(text, reply_markup=back_button)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    dp.include_router(dp)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
    await bot.delete_webhook(drop_pending_updates=True)  # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª

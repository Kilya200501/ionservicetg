import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑—ã (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
MANAGER_IDS = [631954003]  # <-- –î–æ–±–∞–≤—å Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì± iPhone", callback_data="category_iphone")],
])

# –ú–µ–Ω—é –º–æ–¥–µ–ª–µ–π iPhone
iphone_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="iPhone 16 Pro Max", callback_data="iphone_16_pro_max")],
    [InlineKeyboardButton(text="iPhone 16 Pro", callback_data="iphone_16_pro")],
    [InlineKeyboardButton(text="iPhone 16 Plus", callback_data="iphone_16_plus")],
    [InlineKeyboardButton(text="iPhone 15 Pro Max", callback_data="iphone_15_pro_max")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
])

# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ö–æ—Ä–ø—É—Å / –î–∏—Å–ø–ª–µ–π / –ö–∞–º–µ—Ä–∞)
subcategories_menu = {
    "iphone_16_pro_max": InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–æ—Ä–ø—É—Å", callback_data="corpus_16_pro_max")],
        [InlineKeyboardButton(text="–î–∏—Å–ø–ª–µ–π", callback_data="display_16_pro_max")],
        [InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞", callback_data="camera_main_16_pro_max")],
        [InlineKeyboardButton(text="–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞", callback_data="camera_front_16_pro_max")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_iphone")],
    ]),
}

# –¢–æ–≤–∞—Ä—ã
products = {
    "corpus_16_pro_max": [
        ("–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å", "18,000‚ÇΩ", "order_16_pro_max_mid"),
        ("–ó–∞–¥–Ω—è—è –∫—Ä—ã—à–∫–∞", "21,000‚ÇΩ", "order_16_pro_max_back"),
    ],
    "display_16_pro_max": [
        ("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–Ω—è—Ç—ã–π –¥–∏—Å–ø–ª–µ–π", "44,000‚ÇΩ (–∏–¥–µ–∞–ª)", "order_16_pro_max_display"),
    ],
    "camera_main_16_pro_max": [
        ("–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞", "9,000‚ÇΩ", "order_16_pro_max_main_camera"),
    ],
    "camera_front_16_pro_max": [
        ("–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞", "2,500‚ÇΩ", "order_16_pro_max_front_camera"),
    ],
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
def generate_product_keyboard(category):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"{name} - {price}", callback_data=callback)]
        for name, price, callback in products.get(category, [])
    ])
    keyboard.inline_keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_subcategory")])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ Ion Service!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda call: call.data == "category_iphone")
async def category_callback(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:", reply_markup=iphone_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ iPhone
@dp.callback_query(lambda call: call.data.startswith("iphone_"))
async def iphone_model_callback(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=subcategories_menu.get(call.data, main_menu))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ö–æ—Ä–ø—É—Å / –î–∏—Å–ø–ª–µ–π / –ö–∞–º–µ—Ä–∞)
@dp.callback_query(lambda call: call.data.startswith(("corpus_", "display_", "camera_")))
async def subcategory_callback(call: types.CallbackQuery):
    category = call.data
    keyboard = generate_product_keyboard(category)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda call: call.data == "back_main")
async def back_main_callback(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –º–æ–¥–µ–ª–µ–π iPhone
@dp.callback_query(lambda call: call.data == "back_iphone")
async def back_iphone_callback(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:", reply_markup=iphone_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.callback_query(lambda call: call.data == "back_subcategory")
async def back_subcategory_callback(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=subcategories_menu.get(call.message.text, main_menu))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(lambda call: call.data.startswith("order_"))
async def order_callback(call: types.CallbackQuery):
    product_mapping = {
        "order_16_pro_max_mid": ("iPhone 16 Pro Max", "–ö–æ—Ä–ø—É—Å", "–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å", "18,000‚ÇΩ"),
        "order_16_pro_max_back": ("iPhone 16 Pro Max", "–ö–æ—Ä–ø—É—Å", "–ó–∞–¥–Ω—è—è –∫—Ä—ã—à–∫–∞", "21,000‚ÇΩ"),
        "order_16_pro_max_display": ("iPhone 16 Pro Max", "–î–∏—Å–ø–ª–µ–π", "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–Ω—è—Ç—ã–π –¥–∏—Å–ø–ª–µ–π", "44,000‚ÇΩ (–∏–¥–µ–∞–ª)"),
        "order_16_pro_max_main_camera": ("iPhone 16 Pro Max", "–ö–∞–º–µ—Ä–∞", "–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞", "9,000‚ÇΩ"),
        "order_16_pro_max_front_camera": ("iPhone 16 Pro Max", "–ö–∞–º–µ—Ä–∞", "–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞", "2,500‚ÇΩ"),
    }

    if call.data in product_mapping:
        model, category, product, price = product_mapping[call.data]
        user_id = call.from_user.id
        user_name = call.from_user.first_name

        order_text = (
            f"üì¶ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!**\n\n"
            f"üì± –ú–æ–¥–µ–ª—å: {model}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"üîπ –¢–æ–≤–∞—Ä: {product}\n"
            f"üí∞ –¶–µ–Ω–∞: {price}\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: [{user_name}](tg://user?id={user_id})\n"
            f"üÜî ID –∫–ª–∏–µ–Ω—Ç–∞: `{user_id}`"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        for manager_id in MANAGER_IDS:
            await bot.send_message(manager_id, order_text, parse_mode="Markdown")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await call.message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!")
    else:
        await call.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

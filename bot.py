import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==================

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–ø–∏—à–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)
MANAGER_IDS = [5300643604]

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä (parse_mode="Markdown" –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
bot = Bot(token=TOKEN, parse_mode="Markdown")
dp = Dispatcher()

# ================== –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ ==================

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è ¬´–î–∏—Å–ø–ª–µ–π iPhone 16 Pro Max¬ª
order_display_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_display_16_pro_max")],
])

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è ¬´–ö–æ—Ä–ø—É—Å (—á–µ—Ä–Ω—ã–π) iPhone 16 Pro Max¬ª
order_corpus_black_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_corpus_black_16_pro_max")],
])

# ================== –•—ç–Ω–¥–ª–µ—Ä /start (—Å deep_link) ==================

@dp.message(CommandStart())
async def cmd_start(message: types.Message, command: CommandStart):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –≤–∫–ª—é—á–∞—è deep_link (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start display_16_pro_max).
    –í aiogram 3.x –ø–∞—Ä–∞–º–µ—Ç—Ä command: CommandStart —Å–æ–¥–µ—Ä–∂–∏—Ç .args (deep_link).
    """
    deep_link = command.args  # –≠—Ç–æ —Ç–æ, —á—Ç–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ /start

    # –ï—Å–ª–∏ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª —Å–∞–º, –±–µ–∑ —Å—Å—ã–ª–∫–∏)
    if not deep_link:
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.\n\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –∑–∞—à–ª–∏ –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–∫–∞–∑–∞—Ç—å¬ª."
        )
        return

    # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª deep_link —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º
    if deep_link == "display_16_pro_max":
        await message.answer(
            "**–î–∏—Å–ø–ª–µ–π iPhone 16 Pro Max**\n"
            "üíé –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ò–¥–µ–∞–ª\n"
            "üí∞ –¶–µ–Ω–∞: 25 000‚ÇΩ\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:",
            reply_markup=order_display_kb
        )

    elif deep_link == "corpus_black_16_pro_max":
        await message.answer(
            "**–ö–æ—Ä–ø—É—Å (—á–µ—Ä–Ω—ã–π) iPhone 16 Pro Max**\n"
            "üíé –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ò–¥–µ–∞–ª\n"
            "üí∞ –¶–µ–Ω–∞: 20 000‚ÇΩ\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:",
            reply_markup=order_corpus_black_kb
        )

    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

# ================== –•—ç–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏—è ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª ==================

@dp.callback_query(F.data.startswith("order_"))
async def process_order(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback_data –≤–∏–¥–∞ order_display_16_pro_max –∏ —Ç.–ø."""
    user_id = call.from_user.id
    user_name = call.from_user.first_name
    cb_data = call.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "order_display_16_pro_max"

    if cb_data == "order_display_16_pro_max":
        product_name = "–î–∏—Å–ø–ª–µ–π iPhone 16 Pro Max"
        price = "25 000‚ÇΩ"
    elif cb_data == "order_corpus_black_16_pro_max":
        product_name = "–ö–æ—Ä–ø—É—Å (—á–µ—Ä–Ω—ã–π) iPhone 16 Pro Max"
        price = "20 000‚ÇΩ"
    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    order_text = (
        f"üì¶ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!**\n\n"
        f"üîπ **–¢–æ–≤–∞—Ä**: {product_name}\n"
        f"üí∞ **–¶–µ–Ω–∞**: {price}\n\n"
        f"üë§ **–ö–ª–∏–µ–Ω—Ç**: [{user_name}](tg://user?id={user_id})\n"
        f"üÜî **ID**: `{user_id}`"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É(–∞–º)
    for manager_id in MANAGER_IDS:
        try:
            await bot.send_message(manager_id, order_text)
        except Exception as e:
            # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (alert) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await call.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", show_alert=True)

# ================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ==================

async def main():
    # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—Ç–∞—Ä—ã–π Webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º "long polling"
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

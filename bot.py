import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
MANAGER_IDS = [631954003]

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ============================= –ú–µ–Ω—é =============================

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì± iPhone", callback_data="category_iphone")],
    [InlineKeyboardButton(text="üìü iPad", callback_data="category_ipad")],
    [InlineKeyboardButton(text="‚åö Apple Watch", callback_data="category_watch")],
    [InlineKeyboardButton(text="üíª MacBook", callback_data="category_macbook")],
])

# –ú–µ–Ω—é –º–æ–¥–µ–ª–µ–π iPhone
iphone_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="iPhone 16 Pro Max", callback_data="iphone_16_pro_max")],
    [InlineKeyboardButton(text="iPhone 16 Pro", callback_data="iphone_16_pro")],
    [InlineKeyboardButton(text="iPhone 16 Plus", callback_data="iphone_16_plus")],
    [InlineKeyboardButton(text="iPhone 16", callback_data="iphone_16")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
])

# –ú–µ–Ω—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è iPhone 16 Pro Max
iphone_16_pro_max_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–î–∏—Å–ø–ª–µ–π", callback_data="display_16_pro_max")],
    [InlineKeyboardButton(text="–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä", callback_data="battery_16_pro_max")],
    [InlineKeyboardButton(text="–ö–æ—Ä–ø—É—Å", callback_data="corpus_16_pro_max")],
    # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî ¬´–ö–æ—Ä–ø—É—Å (—á–µ—Ä–Ω—ã–π)¬ª
    [InlineKeyboardButton(text="–ö–æ—Ä–ø—É—Å (—á–µ—Ä–Ω—ã–π) - 20 000‚ÇΩ", callback_data="corpus_black_16_pro_max")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_iphone")],
])

# –¢–æ–≤–∞—Ä ¬´–î–∏—Å–ø–ª–µ–π iPhone 16 Pro Max¬ª
display_16_pro_max_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_16_pro_max_display")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_16_pro_max")],
])

# –¢–æ–≤–∞—Ä ¬´–ö–æ—Ä–ø—É—Å (—á–µ—Ä–Ω—ã–π) iPhone 16 Pro Max¬ª
corpus_black_16_pro_max_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_16_pro_max_corpus_black")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_16_pro_max")],
])

# ========================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========================

# /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        text="üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ **ION-–°–µ—Ä–≤–∏—Å**.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=main_menu,
        parse_mode="Markdown"
    )

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (category_*)
@dp.callback_query(F.data.startswith("category_"))
async def category_callback(call: types.CallbackQuery):
    if call.data == "category_iphone":
        await call.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:",
            reply_markup=iphone_menu
        )
    else:
        await call.answer("üîπ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ iPhone (iphone_*)
@dp.callback_query(F.data.startswith("iphone_"))
async def iphone_model_callback(call: types.CallbackQuery):
    if call.data == "iphone_16_pro_max":
        await call.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è **iPhone 16 Pro Max**:",
            parse_mode="Markdown",
            reply_markup=iphone_16_pro_max_menu
        )
    else:
        await call.answer("üîπ –í —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)

# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (display_*, battery_*, corpus_*)
@dp.callback_query(F.data.startswith(("display_", "battery_", "corpus_")))
async def subcategory_callback(call: types.CallbackQuery):
    # –î–∏—Å–ø–ª–µ–π
    if call.data == "display_16_pro_max":
        await call.message.edit_text(
            text="**–î–∏—Å–ø–ª–µ–π iPhone 16 Pro Max**\n"
                 "üíé –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ò–¥–µ–∞–ª\n"
                 "üí∞ –¶–µ–Ω–∞: 25 000‚ÇΩ",
            parse_mode="Markdown",
            reply_markup=display_16_pro_max_menu
        )
    # –ö–æ—Ä–ø—É—Å (—á–µ—Ä–Ω—ã–π)
    elif call.data == "corpus_black_16_pro_max":
        await call.message.edit_text(
            text="**–ö–æ—Ä–ø—É—Å (—á–µ—Ä–Ω—ã–π) iPhone 16 Pro Max**\n"
                 "üíé –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ò–¥–µ–∞–ª\n"
                 "üí∞ –¶–µ–Ω–∞: 20 000‚ÇΩ",
            parse_mode="Markdown",
            reply_markup=corpus_black_16_pro_max_menu
        )
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        await call.answer("üîπ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (order_*)
@dp.callback_query(F.data.startswith("order_"))
async def order_callback(call: types.CallbackQuery):
    user_name = call.from_user.first_name
    user_id = call.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –∑–∞–∫–∞–∑–∞–ª–∏
    if call.data == "order_16_pro_max_display":
        order_text = (
            f"üì¶ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!**\n\n"
            f"üîπ **–¢–æ–≤–∞—Ä**: –î–∏—Å–ø–ª–µ–π iPhone 16 Pro Max\n"
            f"üíé **–°–æ—Å—Ç–æ—è–Ω–∏–µ**: –ò–¥–µ–∞–ª\n"
            f"üí∞ **–¶–µ–Ω–∞**: 25 000‚ÇΩ\n\n"
            f"üë§ **–ö–ª–∏–µ–Ω—Ç**: [{user_name}](tg://user?id={user_id})\n"
            f"üÜî **ID –∫–ª–∏–µ–Ω—Ç–∞**: `{user_id}`"
        )
    elif call.data == "order_16_pro_max_corpus_black":
        order_text = (
            f"üì¶ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!**\n\n"
            f"üîπ **–¢–æ–≤–∞—Ä**: –ö–æ—Ä–ø—É—Å (—á–µ—Ä–Ω—ã–π) iPhone 16 Pro Max\n"
            f"üíé **–°–æ—Å—Ç–æ—è–Ω–∏–µ**: –ò–¥–µ–∞–ª\n"
            f"üí∞ **–¶–µ–Ω–∞**: 20 000‚ÇΩ\n\n"
            f"üë§ **–ö–ª–∏–µ–Ω—Ç**: [{user_name}](tg://user?id={user_id})\n"
            f"üÜî **ID –∫–ª–∏–µ–Ω—Ç–∞**: `{user_id}`"
        )
    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä", show_alert=True)
        return

    # –†–∞—Å—Å—ã–ª–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    for manager_id in MANAGER_IDS:
        await bot.send_message(manager_id, order_text, parse_mode="Markdown")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await call.message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")

# –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª (back_*)
@dp.callback_query(F.data.startswith("back_"))
async def back_callback(call: types.CallbackQuery):
    if call.data == "back_main":
        await call.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=main_menu
        )
    elif call.data == "back_iphone":
        await call.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:",
            reply_markup=iphone_menu
        )
    elif call.data == "back_16_pro_max":
        await call.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è **iPhone 16 Pro Max**:",
            parse_mode="Markdown",
            reply_markup=iphone_16_pro_max_menu
        )

# ========================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ==========================

async def main():
    # –£–¥–∞–ª—è–µ–º Webhook (–µ—Å–ª–∏ –±—ã–ª) –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Polling
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

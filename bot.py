import asyncio
import requests
import xmltodict
from aiogram import Bot, Dispatcher
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.filters import Command


# ---------------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------------
TOKEN = "8102076873:AAHf_fPaG5n2tr5C1NnoOVJ62MnIo-YbRi8"  # <-- –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
FEED_URL = "https://ion-master.ru/index.php?route=extension/feed/yandex_yml"
MANAGER_ID = 5300643604  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –ø–æ–ª—É—á–∞—é—â–µ–≥–æ –∑–∞–∫–∞–∑—ã
# -------------------------------------------------------


bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()


def get_products_from_feed():
    """
    –°–∫–∞—á–∏–≤–∞–µ–º Yandex YML-—Ñ–∏–¥, –ø–∞—Ä—Å–∏–º XML (—á–µ—Ä–µ–∑ xmltodict),
    –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–∏–¥–∞:
    [ {"id":..., "name":..., "price":..., "description":...}, ... ]
    """
    try:
        response = requests.get(FEED_URL, timeout=10)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞: {response.status_code}")
            return []

        data = xmltodict.parse(response.content)
        offers = data["yml_catalog"]["shop"]["offers"]["offer"]
        # –ï—Å–ª–∏ –≤ —Ñ–∏–¥–µ –≤—Å–µ–≥–æ –æ–¥–∏–Ω <offer>, xmltodict –≤–µ—Ä–Ω—ë—Ç —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
        if isinstance(offers, dict):
            offers = [offers]

        products = []
        for offer in offers:
            prod_id = offer.get("@id")        # <offer id="...">
            name = offer.get("name")          # <name>–ù–∞–∑–≤–∞–Ω–∏–µ</name>
            price = offer.get("price")        # <price>12345</price>
            desc = offer.get("description")   # <description>...</description>

            products.append({
                "id": prod_id,
                "name": name,
                "price": price,
                "description": desc
            })
        return products

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∏–¥–∞:", e)
        return []


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ñ–∏–¥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–∫–æ–º (–∫–Ω–æ–ø–∫–∏) –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start.
    """
    products = get_products_from_feed()
    if not products:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã (—Ñ–∏–¥ –ø—É—Å—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞).")
        return

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ aiogram 3.x
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for p in products:
        pid = p["id"]
        pname = p["name"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        pprice = p["price"] or "0"
        text_btn = f"{pname} - {pprice}‚ÇΩ"

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–æ–π (list of list)
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=text_btn, callback_data=f"prod_{pid}")
        ])

    await message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–∏–∑ Yandex YML —Ñ–∏–¥–∞):", reply_markup=kb)


@dp.callback_query()
async def callback_handler(call: CallbackQuery):
    data = call.data

    # --- 1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä (prod_<id>) ---
    if data.startswith("prod_"):
        product_id = data.split("_")[1]
        products = get_products_from_feed()
        product = next((p for p in products if p["id"] == product_id), None)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        name = product["name"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        price = product["price"] or "0"
        desc = product["description"] or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

        text = (
            f"<b>{name}</b>\n"
            f"–¶–µ–Ω–∞: {price}‚ÇΩ\n\n"
            f"{desc}"
        )

        # –ö–Ω–æ–ø–∫–∞ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                callback_data=f"order_{product_id}"
            )
        ]])

        await call.message.edit_text(text, reply_markup=kb)

    # --- 2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª (order_<id>) ---
    elif data.startswith("order_"):
        product_id = data.split("_")[1]
        products = get_products_from_feed()
        product = next((p for p in products if p["id"] == product_id), None)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        user_name = call.from_user.first_name
        user_id = call.from_user.id
        name = product["name"]
        price = product["price"]

        # –¢–µ–∫—Å—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        order_text = (
            f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
            f"üîπ <b>–¢–æ–≤–∞—Ä:</b> {name}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price}‚ÇΩ\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_name}\n"
            f"üÜî <b>ID:</b> {user_id}"
        )

        # –®–ª—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
        try:
            await bot.send_message(MANAGER_ID, order_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", show_alert=True)

    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


async def main():
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook, –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∞–ø–¥–µ–π—Ç–æ–≤
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

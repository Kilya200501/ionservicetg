import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    CallbackQuery
)

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–≤–æ–∑—å–º–∏—Ç–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é)
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
MANAGER_IDS = [5300643604]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode="Markdown")
dp = Dispatcher()

# ========= –ú–ï–ù–Æ ==========

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì± iPhone", callback_data="category_iphone")],
    [InlineKeyboardButton(text="üìü iPad", callback_data="category_ipad")],
    [InlineKeyboardButton(text="‚åö Apple Watch", callback_data="category_watch")],
    [InlineKeyboardButton(text="üíª MacBook", callback_data="category_macbook")],
])

# –ú–µ–Ω—é –º–æ–¥–µ–ª–µ–π iPhone
iphone_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="iPhone 16 Pro Max", callback_data="iphone_16_pro_max")],
    [InlineKeyboardButton(text="iPhone 16 Pro", callback_data="iphone_16_pro")],
    [InlineKeyboardButton(text="iPhone 16 Plus", callback_data="iphone_16_plus")],
    [InlineKeyboardButton(text="iPhone 16", callback_data="iphone_16")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
])

# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ iPhone 16 Pro Max
iphone_16_pro_max_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–î–∏—Å–ø–ª–µ–π", callback_data="display_16_pro_max")],
    [InlineKeyboardButton(text="–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä", callback_data="battery_16_pro_max")],
    [InlineKeyboardButton(text="–ö–æ—Ä–ø—É—Å", callback_data="corpus_16_pro_max")],
    [InlineKeyboardButton(text="–ö–æ—Ä–ø—É—Å (—á–µ—Ä–Ω—ã–π) - 20 000‚ÇΩ", callback_data="corpus_black_16_pro_max")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_iphone")],
])

# –ú–µ–Ω—é ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
display_16_pro_max_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_16_pro_max_display")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_16_pro_max")],
])

corpus_black_16_pro_max_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_16_pro_max_corpus_black")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_16_pro_max")],
])

# ========= –•–≠–ù–î–õ–ï–† /start (—Å deep_link –∏–ª–∏ –±–µ–∑) ==========

@dp.message(CommandStart())
async def cmd_start(message: Message, command: CommandStart):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start. –ï—Å–ª–∏ –µ—Å—Ç—å deep-link (command.args), 
    –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    deep_link = command.args  # –ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Å–ª–µ /start

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ø—Ä–µ–∂–Ω–µ–µ¬ª –º–µ–Ω—é
    if not deep_link:
        await message.answer(
            text=(
                "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ **ION-–°–µ—Ä–≤–∏—Å**.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
            ),
            reply_markup=main_menu
        )
        return

    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å deep-link (–Ω–∞–ø—Ä–∏–º–µ—Ä: /start display_16_pro_max)
    if deep_link == "display_16_pro_max":
        await message.answer(
            text=(
                "**–î–∏—Å–ø–ª–µ–π iPhone 16 Pro Max**\n"
                "üíé –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ò–¥–µ–∞–ª\n"
                "üí∞ –¶–µ–Ω–∞: 25 000‚ÇΩ\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:"
            ),
            reply_markup=display_16_pro_max_menu
        )
    elif deep_link == "corpus_black_16_pro_max":
        await message.answer(
            text=(
                "**–ö–æ—Ä–ø—É—Å (—á–µ—Ä–Ω—ã–π) iPhone 16 Pro Max**\n"
                "üíé –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ò–¥–µ–∞–ª\n"
                "üí∞ –¶–µ–Ω–∞: 20 000‚ÇΩ\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:"
            ),
            reply_markup=corpus_black_16_pro_max_menu
        )
    else:
        # –ï—Å–ª–∏ deep_link –Ω–µ–∑–Ω–∞–∫–æ–º
        await message.answer(
            text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )

# ========= –•–≠–ù–î–õ–ï–†–´ –î–õ–Ø –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ì–û –ú–ï–ù–Æ ==========

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("category_"))
async def category_callback(call: CallbackQuery):
    if call.data == "category_iphone":
        await call.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:",
            reply_markup=iphone_menu
        )
    else:
        await call.answer("üîπ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ iPhone
@dp.callback_query(F.data.startswith("iphone_"))
async def iphone_model_callback(call: CallbackQuery):
    if call.data == "iphone_16_pro_max":
        await call.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è **iPhone 16 Pro Max**:",
            reply_markup=iphone_16_pro_max_menu
        )
    else:
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        await call.answer("üîπ –í —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–∏—Å–ø–ª–µ–π, –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä, –∫–æ—Ä–ø—É—Å)
@dp.callback_query(F.data.startswith(("display_", "battery_", "corpus_")))
async def subcategory_callback(call: CallbackQuery):
    if call.data == "display_16_pro_max":
        await call.message.edit_text(
            text=(
                "**–î–∏—Å–ø–ª–µ–π iPhone 16 Pro Max**\n"
                "üíé –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ò–¥–µ–∞–ª\n"
                "üí∞ –¶–µ–Ω–∞: 25 000‚ÇΩ"
            ),
            reply_markup=display_16_pro_max_menu
        )
    elif call.data == "corpus_black_16_pro_max":
        await call.message.edit_text(
            text=(
                "**–ö–æ—Ä–ø—É—Å (—á–µ—Ä–Ω—ã–π) iPhone 16 Pro Max**\n"
                "üíé –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ò–¥–µ–∞–ª\n"
                "üí∞ –¶–µ–Ω–∞: 20 000‚ÇΩ"
            ),
            reply_markup=corpus_black_16_pro_max_menu
        )
    else:
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞–º–∏
        await call.answer("üîπ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)

# ========= –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–ê–ó–û–í (–∫–Ω–æ–ø–∫–∞ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª) ==========

@dp.callback_query(F.data.startswith("order_"))
async def order_callback(call: CallbackQuery):
    """
    –ü–æ–ª—É—á–∞–µ–º callback_data —Ç–∏–ø–∞ order_16_pro_max_display –∏–ª–∏ order_16_pro_max_corpus_black,
    —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.
    """
    user_name = call.from_user.first_name
    user_id = call.from_user.id
    cb_data = call.data

    if cb_data == "order_16_pro_max_display":
        product_name = "–î–∏—Å–ø–ª–µ–π iPhone 16 Pro Max"
        price = "25 000‚ÇΩ"
    elif cb_data == "order_16_pro_max_corpus_black":
        product_name = "–ö–æ—Ä–ø—É—Å (—á–µ—Ä–Ω—ã–π) iPhone 16 Pro Max"
        price = "20 000‚ÇΩ"
    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä", show_alert=True)
        return

    # –¢–µ–∫—Å—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    order_text = (
        f"üì¶ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!**\n\n"
        f"üîπ **–¢–æ–≤–∞—Ä**: {product_name}\n"
        f"üí∞ **–¶–µ–Ω–∞**: {price}\n\n"
        f"üë§ **–ö–ª–∏–µ–Ω—Ç**: [{user_name}](tg://user?id={user_id})\n"
        f"üÜî **ID**: `{user_id}`"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É(–∞–º)
    for manager_id in MANAGER_IDS:
        await bot.send_message(manager_id, order_text)

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await call.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", show_alert=True)

# ========= –ö–ù–û–ü–ö–ò ¬´–ù–ê–ó–ê–î¬ª ==========

@dp.callback_query(F.data.startswith("back_"))
async def back_callback(call: CallbackQuery):
    if call.data == "back_main":
        await call.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=main_menu
        )
    elif call.data == "back_iphone":
        await call.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:",
            reply_markup=iphone_menu
        )
    elif call.data == "back_16_pro_max":
        await call.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è **iPhone 16 Pro Max**:",
            reply_markup=iphone_16_pro_max_menu
        )

# ========= –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

async def main():
    # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–π webhook –∏ –≤–∫–ª—é—á–∞–µ–º "long polling"
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

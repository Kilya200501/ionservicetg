import asyncio
import requests
import xmltodict
from aiogram import Bot, Dispatcher
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.filters import Command

# ------------------- –ù–ê–°–¢–†–û–ô–ö–ò -------------------
TOKEN = "8102076873:AAHf_fPaG5n2tr5C1NnoOVJ62MnIo-YbRi8"  # <-- –í—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
FEED_URL = "https://ion-master.ru/index.php?route=extension/feed/yandex_yml"
MANAGER_ID = 5300643604  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–µ

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ–∏–¥–∞
CATEGORIES = {}        # cat_id -> cat_name
CATEGORY_PRODUCTS = {} # cat_id -> —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (dict)

def load_feed():
    """
    –°–∫–∞—á–∏–≤–∞–µ–º YML-—Ñ–∏–¥, –ø–∞—Ä—Å–∏–º XML –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º:
      - CATEGORIES (cat_id -> cat_name)
      - CATEGORY_PRODUCTS (cat_id -> [ {id, name, price, count}, ... ])
    –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ/–æ–ø–∏—Å–∞–Ω–∏–µ (picture/description).
    """
    global CATEGORIES, CATEGORY_PRODUCTS
    CATEGORIES.clear()
    CATEGORY_PRODUCTS.clear()

    try:
        resp = requests.get(FEED_URL, timeout=10)
        if resp.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞: {resp.status_code}")
            return

        data = xmltodict.parse(resp.content)
        shop = data["yml_catalog"]["shop"]

        # 1) –°—á–∏—Ç—ã–≤–∞–µ–º <categories>
        raw_cats = shop["categories"]["category"]
        if isinstance(raw_cats, dict):
            raw_cats = [raw_cats]

        for c in raw_cats:
            cat_id = c["@id"]
            cat_name = c.get("#text", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            CATEGORIES[cat_id] = cat_name

        # 2) –°—á–∏—Ç—ã–≤–∞–µ–º <offers>
        raw_offers = shop["offers"]["offer"]
        if isinstance(raw_offers, dict):
            raw_offers = [raw_offers]

        for offer in raw_offers:
            prod_id = offer.get("@id")
            cat_id = offer.get("categoryId")
            name = offer.get("name") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            price = offer.get("price") or "0"
            count = offer.get("count") or "0"

            if cat_id not in CATEGORY_PRODUCTS:
                CATEGORY_PRODUCTS[cat_id] = []
            CATEGORY_PRODUCTS[cat_id].append({
                "id": prod_id,
                "name": name,
                "price": price,
                "count": count
            })

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∏–¥–∞:", e)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –ü—Ä–∏ /start –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–¥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–¥–Ω–∏–º —Å–ø–∏—Å–∫–æ–º).
    """
    load_feed()
    if not CATEGORIES:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ñ–∏–¥ –ø—É—Å—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞).")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for cat_id, cat_name in CATEGORIES.items():
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=cat_name, callback_data=f"cat_{cat_id}")
        ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.callback_query()
async def callback_handler(call: CallbackQuery):
    """
    1) cat_{id} -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    2) prod_{id}_{cat_id} -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –∏–º—è, —Ü–µ–Ω–∞, –∫–æ–ª-–≤–æ) + "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    3) order_{id}_{cat_id} -> –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    """
    data = call.data

    # --- 1) –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
    if data.startswith("cat_"):
        cat_id = data.split("_")[1]
        cat_name = CATEGORIES.get(cat_id, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—É—Å—Ç–æ)
        products = CATEGORY_PRODUCTS.get(cat_id, [])
        if not products:
            await call.message.edit_text(
                f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{cat_name}</b> –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."
            )
            return

        kb = InlineKeyboardMarkup(inline_keyboard=[])
        for p in products:
            pid = p["id"]
            pname = p["name"]
            pprice = p["price"]
            pcount = p["count"]
            text_btn = f"{pname} ‚Äî {pprice}‚ÇΩ (–∫–æ–ª: {pcount})"
            kb.inline_keyboard.append([
                InlineKeyboardButton(text=text_btn, callback_data=f"prod_{pid}_{cat_id}")
            ])

        await call.message.edit_text(
            f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{cat_name}</b>:",
            reply_markup=kb
        )

    # --- 2) –ü–æ–¥—Ä–æ–±–Ω–æ –æ —Ç–æ–≤–∞—Ä–µ ---
    elif data.startswith("prod_"):
        # —Ñ–æ—Ä–º–∞—Ç: "prod_{–ø—Ä–æ–¥_id}_{–∫–∞—Ç_id}"
        _, prod_id, cat_id = data.split("_")
        products = CATEGORY_PRODUCTS.get(cat_id, [])
        product = next((x for x in products if x["id"] == prod_id), None)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        name = product["name"]
        price = product["price"]
        count = product["count"]

        text = (
            f"<b>{name}</b>\n"
            f"–¶–µ–Ω–∞: {price}‚ÇΩ\n"
            f"–ù–∞–ª–∏—á–∏–µ: {count} —à—Ç."
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                callback_data=f"order_{prod_id}_{cat_id}"
            )
        ]])

        await call.message.edit_text(text, reply_markup=kb)

    # --- 3) –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ---
    elif data.startswith("order_"):
        _, prod_id, cat_id = data.split("_")
        products = CATEGORY_PRODUCTS.get(cat_id, [])
        product = next((x for x in products if x["id"] == prod_id), None)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        name = product["name"]
        price = product["price"]
        user_name = call.from_user.first_name
        user_id = call.from_user.id

        order_text = (
            f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
            f"üîπ <b>–¢–æ–≤–∞—Ä:</b> {name}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price}‚ÇΩ\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_name}\n"
            f"üÜî <b>ID:</b> {user_id}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
        try:
            await bot.send_message(MANAGER_ID, order_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await call.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", show_alert=True)

    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

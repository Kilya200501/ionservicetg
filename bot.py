import asyncio
import time
import aiohttp
import xmltodict

from aiogram import Bot, Dispatcher
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.filters import Command

# ------------------- –ù–ê–°–¢–†–û–ô–ö–ò -------------------
TOKEN = "8102076873:AAHf_fPaG5n2tr5C1NnoOVJ62MnIo-YbRi8"  # –í—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
FEED_URL = "https://ion-master.ru/index.php?route=extension/feed/yandex_yml"
MANAGER_ID = 5300643604  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

# –í—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) ¬´–∂–∏–∑–Ω–∏¬ª –∫—ç—à–∞ (TTL). –ü–æ–∫–∞ –Ω–µ –∏—Å—Ç–µ—á—ë—Ç,
# –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ —Å–∫–∞—á–∏–≤–∞—Ç—å/–ø–∞—Ä—Å–∏—Ç—å —Ñ–∏–¥.
CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ-–∫—ç—à
CATEGORIES = {}        # cat_id -> cat_name
CATEGORY_PRODUCTS = {} # cat_id -> [ {id, name, price, count}, ... ]
last_update_time = 0.0 # timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
feed_lock = asyncio.Lock()  # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è fetch_feed


async def fetch_feed(force: bool = False):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç YML-—Ñ–∏–¥ –∏ –ø–∞—Ä—Å–∏—Ç –µ–≥–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
      - CATEGORIES
      - CATEGORY_PRODUCTS
    –ï—Å–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ CACHE_TTL (–∏ force=False),
    –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à).

    –ë–ª–∞–≥–æ–¥–∞—Ä—è feed_lock –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –≤—ã–∑–æ–≤—É—Ç
    –¥–≤–æ–π–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É. –û—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç –∂–¥–∞—Ç—å, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.
    """
    global last_update_time, CATEGORIES, CATEGORY_PRODUCTS

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ —É–∂–µ –∫—ç—à
    now = time.time()
    if not force and (now - last_update_time) < CACHE_TTL:
        # –î–∞–Ω–Ω—ã–µ –µ—â—ë –∞–∫—Ç—É–∞–ª—å–Ω—ã ‚Äî –≤—ã—Ö–æ–¥–∏–º
        return

    # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    async with feed_lock:
        # –ú–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è, —á—Ç–æ –ø–æ–∫–∞ –º—ã –∂–¥–∞–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É,
        # –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫ —É–∂–µ –æ–±–Ω–æ–≤–∏–ª –∫—ç—à ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –µ—â—ë —Ä–∞–∑
        now = time.time()
        if not force and (now - last_update_time) < CACHE_TTL:
            return

        print("[fetch_feed] -> –ó–∞–≥—Ä—É–∑–∫–∞ YML-—Ñ–∏–¥–∞...")
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(FEED_URL, timeout=10) as resp:
                    if resp.status != 200:
                        print(f"–û—à–∏–±–∫–∞ {resp.status} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞")
                        return
                    xml_text = await resp.text()

            data = xmltodict.parse(xml_text)
            shop = data["yml_catalog"]["shop"]

            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            CATEGORIES.clear()
            CATEGORY_PRODUCTS.clear()

            # 1) –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            raw_cats = shop["categories"]["category"]
            if isinstance(raw_cats, dict):
                # –ï—Å–ª–∏ –≤ —Ñ–∏–¥–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                raw_cats = [raw_cats]
            for c in raw_cats:
                cat_id = c["@id"]
                cat_name = c.get("#text", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                CATEGORIES[cat_id] = cat_name

            # 2) –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            raw_offers = shop["offers"]["offer"]
            if isinstance(raw_offers, dict):
                raw_offers = [raw_offers]

            for offer in raw_offers:
                prod_id = offer.get("@id")
                cat_id = offer.get("categoryId", "0")
                name = offer.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                price = offer.get("price", "0")
                count = offer.get("count", "0")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Å–ª–æ–≤–∞—Ä–µ, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ cat_id
                if cat_id not in CATEGORY_PRODUCTS:
                    CATEGORY_PRODUCTS[cat_id] = []
                CATEGORY_PRODUCTS[cat_id].append({
                    "id": prod_id,
                    "name": name,
                    "price": price,
                    "count": count
                })

            last_update_time = time.time()
            print("[fetch_feed] -> –§–∏–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à.")

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∏–¥–∞:", e)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –ü—Ä–∏ /start:
    1) –ó–∞–≥—Ä—É–∂–∞–µ–º (–∏–ª–∏ –±–µ—Ä—ë–º –∏–∑ –∫—ç—à–∞) —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    2) –í—ã–≤–æ–¥–∏–º –∏—Ö –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫
    """
    await fetch_feed()
    if not CATEGORIES:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ñ–∏–¥ –ø—É—Å—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞).")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for cat_id, cat_name in CATEGORIES.items():
        kb.inline_keyboard.append([
            InlineKeyboardButton(
                text=cat_name,
                callback_data=f"cat_{cat_id}"
            )
        ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)


@dp.callback_query()
async def callback_handler(call: CallbackQuery):
    data = call.data

    # 1) –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ -> "cat_{cat_id}"
    if data.startswith("cat_"):
        cat_id = data.split("_")[1]
        cat_name = CATEGORIES.get(cat_id, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        # –í–æ–∑—å–º—ë–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
        products = CATEGORY_PRODUCTS.get(cat_id, [])

        if not products:
            # –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
            await call.message.edit_text(
                f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{cat_name}</b> –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."
            )
            return

        kb = InlineKeyboardMarkup(inline_keyboard=[])
        for p in products:
            pid = p["id"]
            pname = p["name"]
            pprice = p["price"]
            pcount = p["count"]
            button_text = f"{pname} ‚Äî {pprice}‚ÇΩ (–∫–æ–ª: {pcount})"
            kb.inline_keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"prod_{pid}_{cat_id}"
                )
            ])

        await call.message.edit_text(
            text=f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{cat_name}</b>:",
            reply_markup=kb
        )

    # 2) –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ -> "prod_{prod_id}_{cat_id}"
    elif data.startswith("prod_"):
        _, prod_id, cat_id = data.split("_", 2)
        products = CATEGORY_PRODUCTS.get(cat_id, [])
        product = next((x for x in products if x["id"] == prod_id), None)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        name = product["name"]
        price = product["price"]
        count = product["count"]

        text = (
            f"<b>{name}</b>\n"
            f"–¶–µ–Ω–∞: {price}‚ÇΩ\n"
            f"–û—Å—Ç–∞—Ç–æ–∫: {count}"
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                    callback_data=f"order_{prod_id}_{cat_id}"
                )
            ]]
        )

        await call.message.edit_text(text, reply_markup=kb)

    # 3) –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ -> "order_{prod_id}_{cat_id}"
    elif data.startswith("order_"):
        _, prod_id, cat_id = data.split("_", 2)
        products = CATEGORY_PRODUCTS.get(cat_id, [])
        product = next((x for x in products if x["id"] == prod_id), None)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        user_name = call.from_user.first_name
        user_id = call.from_user.id

        order_text = (
            f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
            f"üîπ <b>–¢–æ–≤–∞—Ä:</b> {product['name']}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']}‚ÇΩ\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_name}\n"
            f"üÜî <b>ID:</b> {user_id}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
        try:
            await bot.send_message(MANAGER_ID, order_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

        await call.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", show_alert=True)

    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


async def main():
    # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—Ç–∞—Ä—ã–π webhook –∏ –æ—á–∏—â–∞–µ–º –∞–ø–¥–µ–π—Ç—ã
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

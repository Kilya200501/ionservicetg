import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑—ã (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
MANAGER_IDS = [631954003]  # <-- –í—Å—Ç–∞–≤—å Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì± iPhone", callback_data="category_iphone")],
])

# –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π iPhone
iphone_models = [
    "16_pro_max", "16_pro", "16_plus", "15_pro_max", "15_pro", "15_plus",
    "14_pro_max", "14_pro", "14_plus", "14", "13_pro_max", "13_pro", "13",
    "12_pro_max", "12_pro", "12", "11_pro_max", "11_pro", "11",
    "xr", "xs_max", "xs", "x", "8_plus", "8", "7_plus", "7"
]

# –ú–µ–Ω—é –º–æ–¥–µ–ª–µ–π iPhone
iphone_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text=f"iPhone {model.replace('_', ' ').title()}", callback_data=f"iphone_{model}")]
    for model in iphone_models
] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
def generate_subcategories(model):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–æ—Ä–ø—É—Å", callback_data=f"corpus_{model}")],
        [InlineKeyboardButton(text="–î–∏—Å–ø–ª–µ–π", callback_data=f"display_{model}")],
        [InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞", callback_data=f"camera_main_{model}")],
        [InlineKeyboardButton(text="–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞", callback_data=f"camera_front_{model}")],
        [InlineKeyboardButton(text="–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä", callback_data=f"battery_{model}")],
        [InlineKeyboardButton(text="–®–ª–µ–π—Ñ –∑–∞—Ä—è–¥–∫–∏", callback_data=f"flex_{model}")],
        [InlineKeyboardButton(text="–î–∏–Ω–∞–º–∏–∫", callback_data=f"speaker_{model}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_iphone")],
    ])

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º
subcategories_menu = {f"iphone_{model}": generate_subcategories(model) for model in iphone_models}

# –¢–æ–≤–∞—Ä—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π iPhone
products = {
    # iPhone 16 Pro Max
    "corpus_16_pro_max": [
        ("–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å", "18,000‚ÇΩ", "order_16_pro_max_mid"),
        ("–ó–∞–¥–Ω—è—è –∫—Ä—ã—à–∫–∞", "21,000‚ÇΩ", "order_16_pro_max_back"),
    ],
    "display_16_pro_max": [
        ("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–Ω—è—Ç—ã–π –¥–∏—Å–ø–ª–µ–π", "44,000‚ÇΩ (–∏–¥–µ–∞–ª)", "order_16_pro_max_display"),
    ],
    "camera_main_16_pro_max": [
        ("–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞", "9,000‚ÇΩ", "order_16_pro_max_main_camera"),
    ],
    "camera_front_16_pro_max": [
        ("–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞", "2,500‚ÇΩ", "order_16_pro_max_front_camera"),
    ],

    # iPhone 16 Pro
    "corpus_16_pro": [
        ("–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Ç–∏—Ç–∞–Ω)", "17,000‚ÇΩ", "order_16_pro_mid"),
        ("–ó–∞–¥–Ω—è—è –∫—Ä—ã—à–∫–∞ (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Ç–∏—Ç–∞–Ω)", "19,000‚ÇΩ", "order_16_pro_back"),
    ],
    "display_16_pro": [
        ("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–Ω—è—Ç—ã–π –¥–∏—Å–ø–ª–µ–π", "41,000‚ÇΩ (–∏–¥–µ–∞–ª)", "order_16_pro_display"),
    ],
    "camera_main_16_pro": [
        ("–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞", "8,000‚ÇΩ", "order_16_pro_main_camera"),
    ],
    "camera_front_16_pro": [
        ("–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞", "2,500‚ÇΩ", "order_16_pro_front_camera"),
    ],

    # iPhone 16 Plus
    "corpus_16_plus": [
        ("–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å (eSIM)", "15,000‚ÇΩ", "order_16_plus_mid"),
        ("–ó–∞–¥–Ω—è—è –∫—Ä—ã—à–∫–∞", "16,000‚ÇΩ", "order_16_plus_back"),
    ],
    "display_16_plus": [
        ("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–Ω—è—Ç—ã–π –¥–∏—Å–ø–ª–µ–π", "41,000‚ÇΩ (–æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)", "order_16_plus_display"),
    ],
    "camera_main_16_plus": [
        ("–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞", "7,000‚ÇΩ", "order_16_plus_main_camera"),
    ],
    "camera_front_16_plus": [
        ("–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞", "2,500‚ÇΩ", "order_16_plus_front_camera"),
    ],

    # iPhone 15 Pro Max
    "corpus_15_pro_max": [
        ("–ö–æ—Ä–ø—É—Å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", "23,000‚ÇΩ", "order_15_pro_max_body_perfect"),
        ("–ö–æ—Ä–ø—É—Å –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", "22,000‚ÇΩ", "order_15_pro_max_body_good"),
        ("–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å", "10,000‚ÇΩ", "order_15_pro_max_mid"),
    ],
    "display_15_pro_max": [
        ("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–Ω—è—Ç—ã–π –¥–∏—Å–ø–ª–µ–π", "32,000‚ÇΩ (—Ö–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)", "order_15_pro_max_display"),
    ],
    "camera_main_15_pro_max": [
        ("–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞", "3,000‚ÇΩ", "order_15_pro_max_main_camera"),
    ],
    "camera_front_15_pro_max": [
        ("–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞", "1,000‚ÇΩ", "order_15_pro_max_front_camera"),
    ],

    # iPhone 15 Pro
    "corpus_15_pro": [
        ("–ö–æ—Ä–ø—É—Å –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", "22,000‚ÇΩ", "order_15_pro_body_perfect"),
        ("–ö–æ—Ä–ø—É—Å eSIM", "20,000‚ÇΩ", "order_15_pro_body_esim"),
        ("–†–∞–º–∫–∞ —Å–æ —à–ª–µ–π—Ñ–∞–º–∏", "9,000‚ÇΩ", "order_15_pro_frame_flex"),
    ],
    "display_15_pro": [
        ("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–Ω—è—Ç—ã–π –¥–∏—Å–ø–ª–µ–π", "28,000‚ÇΩ (–ø–æ–ª–∏—Ä–æ–≤–∫–∞)", "order_15_pro_display"),
        ("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–Ω—è—Ç—ã–π –¥–∏—Å–ø–ª–µ–π", "27,000‚ÇΩ (—Ö–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)", "order_15_pro_display_good"),
    ],
    "camera_main_15_pro": [
        ("–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞", "3,000‚ÇΩ", "order_15_pro_main_camera"),
    ],
    "camera_front_15_pro": [
        ("–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞", "1,000‚ÇΩ", "order_15_pro_front_camera"),
    ],
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ Ion Service!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "iPhone"
@dp.callback_query(lambda call: call.data == "category_iphone")
async def category_callback(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:", reply_markup=iphone_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ iPhone
@dp.callback_query(lambda call: call.data.startswith("iphone_"))
async def iphone_model_callback(call: types.CallbackQuery):
    model = call.data.replace("iphone_", "").replace("_", " ").title()
    await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {model}.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=subcategories_menu.get(call.data, main_menu))

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (–î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ü–ï–†–ï–î subcategory_callback)
def generate_product_keyboard(category):
    if category not in products:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_subcategory")]
        ])

    def generate_product_keyboard(category):
    if category not in products:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_subcategory")]
        ])

    keyboard = InlineKeyboardMarkup()
    for item in products[category]:
        if len(item) == 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –º–∞—Å—Å–∏–≤–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ (–∏–º—è, —Ü–µ–Ω–∞, callback_data)
            name, price, callback = item
            keyboard.add(InlineKeyboardButton(f"{name} - {price}", callback_data=callback))
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {item}")

    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_subcategory"))
    return keyboard
    keyboard.inline_keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_subcategory")])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ö–æ—Ä–ø—É—Å, –î–∏—Å–ø–ª–µ–π –∏ —Ç. –¥.)
@dp.callback_query(lambda call: call.data.startswith(("corpus_", "display_", "camera_", "battery_", "flex_", "speaker_")))
async def subcategory_callback(call: types.CallbackQuery):
    category = call.data
    keyboard = generate_product_keyboard(category)

    try:
        await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category.split('_')[0].title()}.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)
    except Exception as e:
        await call.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(lambda call: call.data.startswith("order_"))
async def order_callback(call: types.CallbackQuery):
    product_found = None

    # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    for category, items in products.items():
        for name, price, callback in items:
            if call.data == callback:
                product_found = (name, price)
                break
        if product_found:
            break

    if product_found:
        name, price = product_found
        user_name = call.from_user.first_name
        user_id = call.from_user.id

        order_text = (
            f"üì¶ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!**\n\n"
            f"üîπ –¢–æ–≤–∞—Ä: {name}\n"
            f"üí∞ –¶–µ–Ω–∞: {price}\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: [{user_name}](tg://user?id={user_id})\n"
            f"üÜî ID –∫–ª–∏–µ–Ω—Ç–∞: `{user_id}`"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        for manager_id in MANAGER_IDS:
            await bot.send_message(manager_id, order_text, parse_mode="Markdown")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await call.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\nüîπ –¢–æ–≤–∞—Ä: {name}\nüí∞ –¶–µ–Ω–∞: {price}\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    else:
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda call: call.data.startswith("back_"))
async def back_callback(call: types.CallbackQuery):
    if call.data == "back_iphone":
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:", reply_markup=iphone_menu)
    elif call.data == "back_main":
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu)
    elif call.data == "back_subcategory":
        model_key = call.message.text.split("**")[1].lower().replace(" ", "_")
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=subcategories_menu.get(f"iphone_{model_key}", main_menu))

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

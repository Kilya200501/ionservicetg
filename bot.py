import asyncio
import time
import aiohttp
import xmltodict

from aiogram import Bot, Dispatcher
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.filters import Command

# ------------------- –ù–ê–°–¢–†–û–ô–ö–ò -------------------
TOKEN = "8102076873:AAHf_fPaG5n2tr5C1NnoOVJ62MnIo-YbRi8"  # –í—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
FEED_URL = "https://ion-master.ru/index.php?route=extension/feed/yandex_yml"
MANAGER_ID = 5300643604  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–µ

# –í—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) ‚Äî –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ñ–∏–¥, –ø–æ–∫–∞
# –Ω–µ –ø—Ä–æ–π–¥—ë—Ç 5 –º–∏–Ω—É—Ç.
CACHE_TTL = 300

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# ---- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∫—ç—à–∞ ----
CATEGORIES = {}       # cat_id -> {id, parent, name, children: [...]}
CAT_ROOTS = []        # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CAT_PRODUCTS = {}     # cat_id -> [ {id, name, price}, ... ]
last_update_time = 0.0
feed_lock = asyncio.Lock()  # –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

session = None  # aiohttp.ClientSession (—Å–æ–∑–¥–∞—ë–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ)


async def init_session():
    """–°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—É—é aiohttp-—Å–µ—Å—Å–∏—é –µ–¥–∏–Ω–æ–∂–¥—ã."""
    global session
    if session is None:
        session = aiohttp.ClientSession()


async def close_session():
    """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    global session
    if session:
        await session.close()
        session = None


async def fetch_feed(force: bool = False):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç YML-—Ñ–∏–¥, —Å—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.
    –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å —Ñ–∏–¥ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ.
    """
    global last_update_time, CATEGORIES, CAT_ROOTS, CAT_PRODUCTS
    now = time.time()

    if not force and (now - last_update_time) < CACHE_TTL:
        # –ö—ç—à –µ—â—ë –∞–∫—Ç—É–∞–ª–µ–Ω
        return

    async with feed_lock:
        # –ü–æ–∫–∞ –∂–¥–∞–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –º–æ–≥ –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–∏—Ç—å
        now = time.time()
        if not force and (now - last_update_time) < CACHE_TTL:
            return

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–¥ –∏–∑ FEED_URL
            async with session.get(FEED_URL, timeout=10) as resp:
                if resp.status != 200:
                    print(f"–û—à–∏–±–∫–∞ {resp.status} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞")
                    return
                xml_text = await resp.text()

            data = xmltodict.parse(xml_text)
            shop = data["yml_catalog"]["shop"]

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            CATEGORIES.clear()
            CAT_ROOTS.clear()
            CAT_PRODUCTS.clear()

            # === 1) –°—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
            raw_cats = shop["categories"]["category"]
            if isinstance(raw_cats, dict):
                raw_cats = [raw_cats]

            # –°–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏
            for c in raw_cats:
                cat_id = c["@id"]
                parent_id = c.get("@parentId")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
                name = c.get("#text", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

                CATEGORIES[cat_id] = {
                    "id": cat_id,
                    "parent": parent_id,
                    "name": name,
                    "children": []
                }

            # –°–≤—è–∑—ã–≤–∞–µ–º –≤ –¥–µ—Ä–µ–≤–æ
            for cid, cat_data in CATEGORIES.items():
                pid = cat_data["parent"]
                if pid and pid in CATEGORIES:
                    CATEGORIES[pid]["children"].append(cid)
                else:
                    # –∫–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                    CAT_ROOTS.append(cid)

            # === 2) –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã (offers) ===
            raw_offers = shop["offers"]["offer"]
            if isinstance(raw_offers, dict):
                raw_offers = [raw_offers]

            for off in raw_offers:
                prod_id = off.get("@id")
                cat_id = off.get("categoryId")
                name = off.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                price = off.get("price", "0")
                # count = off.get("count")  # –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

                if not cat_id:
                    # –ï—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç categoryId, –ø—Ä–æ–ø—É—Å—Ç–∏–º
                    continue

                if cat_id not in CAT_PRODUCTS:
                    CAT_PRODUCTS[cat_id] = []
                CAT_PRODUCTS[cat_id].append({
                    "id": prod_id,
                    "name": name,
                    "price": price
                })

            # –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ –∫—ç—à
            last_update_time = time.time()

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∏–¥–∞:", e)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –ü—Ä–∏ /start: –∑–∞–≥—Ä—É–∂–∞–µ–º (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞) —Ñ–∏–¥, 
    –≤—ã–≤–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    await init_session()
    await fetch_feed()

    if not CATEGORIES:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–¥.")
        return

    if not CAT_ROOTS:
        await message.answer("–ù–µ—Ç –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for root_id in CAT_ROOTS:
        name = CATEGORIES[root_id]["name"]
        kb.inline_keyboard.append([
            InlineKeyboardButton(
                text=name,
                callback_data=f"cat_{root_id}"
            )
        ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)


@dp.callback_query()
async def callback_router(call: CallbackQuery):
    data = call.data

    # --- "cat_<id>" ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é ---
    if data.startswith("cat_"):
        cat_id = data.split("_", 1)[1]
        cat_data = CATEGORIES.get(cat_id)
        if not cat_data:
            await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –î–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcats = cat_data["children"]
        # –¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        prods = CAT_PRODUCTS.get(cat_id, [])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ (—Å–Ω–∞—á–∞–ª–∞ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ—Ç–æ–º —Ç–æ–≤–∞—Ä—ã)
        kb = InlineKeyboardMarkup(inline_keyboard=[])

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if subcats:
            for scid in subcats:
                sc_name = CATEGORIES[scid]["name"]
                kb.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=sc_name,
                        callback_data=f"cat_{scid}"
                    )
                ])

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
        if prods:
            for p in prods:
                pid = p["id"]
                pname = p["name"]
                pprice = p["price"]
                btn_text = f"{pname} - {pprice}‚ÇΩ"
                kb.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=btn_text,
                        callback_data=f"prod_{pid}_{cat_id}"
                    )
                ])

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"<b>{cat_data['name']}</b>\n"
        if subcats:
            text += "\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
        if prods:
            text += "\n\n–¢–æ–≤–∞—Ä—ã:"

        if (not subcats) and (not prods):
            text += "\n\n–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –Ω–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, –Ω–∏ —Ç–æ–≤–∞—Ä–æ–≤."

        await call.message.edit_text(text, reply_markup=kb)

    # --- "prod_<prod_id>_<cat_id>" ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä ---
    elif data.startswith("prod_"):
        _, prod_id, cat_id = data.split("_", 2)
        products = CAT_PRODUCTS.get(cat_id, [])
        product = next((x for x in products if x["id"] == prod_id), None)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        name = product["name"]
        price = product["price"]

        text = (
            f"<b>{name}</b>\n"
            f"–¶–µ–Ω–∞: {price}‚ÇΩ"
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                    callback_data=f"order_{prod_id}_{cat_id}"
                )
            ]]
        )

        await call.message.edit_text(text, reply_markup=kb)

    # --- "order_<prod_id>_<cat_id>" ‚Äî –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ---
    elif data.startswith("order_"):
        _, prod_id, cat_id = data.split("_", 2)
        products = CAT_PRODUCTS.get(cat_id, [])
        product = next((x for x in products if x["id"] == prod_id), None)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        user_name = call.from_user.first_name
        user_id = call.from_user.id
        name = product["name"]
        price = product["price"]

        order_text = (
            f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
            f"üîπ <b>–¢–æ–≤–∞—Ä:</b> {name}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price}‚ÇΩ\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_name}\n"
            f"üÜî <b>ID:</b> {user_id}"
        )

        await bot.send_message(MANAGER_ID, order_text)
        await call.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", show_alert=True)

    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º aiohttp-—Å–µ—Å—Å–∏—é
    await init_session()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π webhook (–µ—Å–ª–∏ –±—ã–ª) –∏ –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∞–ø–¥–µ–π—Ç–æ–≤
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (long-polling)
    await dp.start_polling(bot)
    # –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ (Ctrl+C) –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    await close_session()

if __name__ == "__main__":
    asyncio.run(main())

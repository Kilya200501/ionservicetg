import asyncio
import time
import aiohttp
import xmltodict

from aiogram import Bot, Dispatcher
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.filters import Command

# ------------------- –ù–ê–°–¢–†–û–ô–ö–ò -------------------
TOKEN = "8102076873:AAHf_fPaG5n2tr5C1NnoOVJ62MnIo-YbRi8"  # –í—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
FEED_URL = "https://ion-master.ru/index.php?route=extension/feed/yandex_yml"
MANAGER_ID = 5300643604  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–µ

CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç (–≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–¥–∞)

bot = Bot(token=TOKEN)  # –£–±—Ä–∞–ª–∏ parse_mode
dp = Dispatcher()

# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∫—ç—à–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã + –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
CATEGORIES = {}       # cat_id -> {id, parent, name, children: [...]}
CAT_ROOTS = []        # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CAT_PRODUCTS = {}     # cat_id -> [ {id, name, price}, ... ]
last_update_time = 0.0
feed_lock = asyncio.Lock()
session = None  # aiohttp.ClientSession


async def init_session():
    """–°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—É—é aiohttp-—Å–µ—Å—Å–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    global session
    if session is None:
        session = aiohttp.ClientSession()


async def close_session():
    """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    global session
    if session:
        await session.close()
        session = None


async def fetch_feed(force: bool = False):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç YML-—Ñ–∏–¥. –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ CACHE_TTL (5 –º–∏–Ω—É—Ç).
    –ï—Å–ª–∏ (now - last_update_time) < CACHE_TTL –∏ force=False ‚Äî –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º.
    """
    global last_update_time, CATEGORIES, CAT_ROOTS, CAT_PRODUCTS
    now = time.time()

    if not force and (now - last_update_time) < CACHE_TTL:
        return

    async with feed_lock:
        now = time.time()
        if not force and (now - last_update_time) < CACHE_TTL:
            return

        try:
            async with session.get(FEED_URL, timeout=10) as resp:
                if resp.status != 200:
                    print(f"–û—à–∏–±–∫–∞ {resp.status} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞.")
                    return

                xml_text = await resp.text()

            data = xmltodict.parse(xml_text)
            shop = data["yml_catalog"]["shop"]

            CATEGORIES.clear()
            CAT_ROOTS.clear()
            CAT_PRODUCTS.clear()

            # === –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
            raw_cats = shop["categories"]["category"]
            if isinstance(raw_cats, dict):
                raw_cats = [raw_cats]

            for c in raw_cats:
                cat_id = c["@id"]
                parent_id = c.get("@parentId")
                name = c.get("#text", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

                CATEGORIES[cat_id] = {
                    "id": cat_id,
                    "parent": parent_id,
                    "name": name,
                    "children": []
                }

            # –°–≤—è–∑—ã–≤–∞–µ–º –≤ –¥–µ—Ä–µ–≤–æ
            for cid, cat_data in CATEGORIES.items():
                pid = cat_data["parent"]
                if pid and pid in CATEGORIES:
                    CATEGORIES[pid]["children"].append(cid)
                else:
                    CAT_ROOTS.append(cid)

            # === –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã (offers) ===
            raw_offers = shop["offers"]["offer"]
            if isinstance(raw_offers, dict):
                raw_offers = [raw_offers]

            for off in raw_offers:
                prod_id = off.get("@id")
                cat_id = off.get("categoryId")
                name = off.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                price = off.get("price", "0")

                if not cat_id:
                    continue

                if cat_id not in CAT_PRODUCTS:
                    CAT_PRODUCTS[cat_id] = []
                CAT_PRODUCTS[cat_id].append({
                    "id": prod_id,
                    "name": name,
                    "price": price
                })

            last_update_time = time.time()

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∏–¥–∞:", e)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –ü—Ä–∏ /start: –ø–æ–¥–≥—Ä—É–∂–∞–µ–º (–∏–ª–∏ –∏–∑ –∫—ç—à–∞) —Ñ–∏–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    await init_session()
    await fetch_feed()

    if not CATEGORIES:
        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º parse_mode="HTML", —Ç–∞–∫ –∫–∞–∫ —Ö–æ—Ç–∏–º bold, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–¥.", parse_mode="HTML")
        return

    if not CAT_ROOTS:
        await message.answer("–ù–µ—Ç –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", parse_mode="HTML")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for root_id in CAT_ROOTS:
        name = CATEGORIES[root_id]["name"]
        kb.inline_keyboard.append([
            InlineKeyboardButton(
                text=name,
                callback_data=f"cat_{root_id}"
            )
        ])

    await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>", reply_markup=kb, parse_mode="HTML")


@dp.callback_query()
async def callback_router(call: CallbackQuery):
    data = call.data

    # cat_{id} -> –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if data.startswith("cat_"):
        cat_id = data.split("_", 1)[1]
        cat_data = CATEGORIES.get(cat_id)
        if not cat_data:
            await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        subcats = cat_data["children"]
        prods = CAT_PRODUCTS.get(cat_id, [])

        kb = InlineKeyboardMarkup(inline_keyboard=[])

        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if subcats:
            for scid in subcats:
                sc_name = CATEGORIES[scid]["name"]
                kb.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=sc_name,
                        callback_data=f"cat_{scid}"
                    )
                ])

        # –¢–æ–≤–∞—Ä—ã
        if prods:
            for p in prods:
                pid = p["id"]
                pname = p["name"]
                pprice = p["price"]
                btn_text = f"{pname} - {pprice}‚ÇΩ"
                kb.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=btn_text,
                        callback_data=f"prod_{pid}_{cat_id}"
                    )
                ])

        text = f"<b>{cat_data['name']}</b>\n"

        if subcats:
            text += "\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
        if prods:
            text += "\n\n–¢–æ–≤–∞—Ä—ã:"
        if (not subcats) and (not prods):
            text += "\n\n–ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤."

        # edit_text —Å parse_mode="HTML", —Ç. –∫. –∏—Å–ø–æ–ª—å–∑—É–µ–º <b> –≤ —Ç–µ–∫—Å—Ç–µ
        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")

    # prod_{prod_id}_{cat_id} -> —Ç–æ–≤–∞—Ä
    elif data.startswith("prod_"):
        _, prod_id, cat_id = data.split("_", 2)
        products = CAT_PRODUCTS.get(cat_id, [])
        product = next((x for x in products if x["id"] == prod_id), None)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        name = product["name"]
        price = product["price"]

        text = f"<b>{name}</b>\n–¶–µ–Ω–∞: {price}‚ÇΩ"

        kb = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                    callback_data=f"order_{prod_id}_{cat_id}"
                )
            ]]
        )

        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")

    # order_{prod_id}_{cat_id} -> –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
    elif data.startswith("order_"):
        _, prod_id, cat_id = data.split("_", 2)
        products = CAT_PRODUCTS.get(cat_id, [])
        product = next((x for x in products if x["id"] == prod_id), None)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        user_name = call.from_user.first_name
        user_id = call.from_user.id

        name = product["name"]
        price = product["price"]

        order_text = (
            f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
            f"üîπ <b>–¢–æ–≤–∞—Ä:</b> {name}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price}‚ÇΩ\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_name}\n"
            f"üÜî <b>ID:</b> {user_id}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É (—Å parse_mode="HTML")
        await bot.send_message(MANAGER_ID, order_text, parse_mode="HTML")

        await call.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", show_alert=True)

    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


async def main():
    await init_session()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
    await close_session()

if __name__ == "__main__":
    asyncio.run(main())
